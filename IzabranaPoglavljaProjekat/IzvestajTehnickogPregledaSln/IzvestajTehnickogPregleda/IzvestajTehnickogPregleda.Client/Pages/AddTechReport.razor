@page "/addTechReport"
@using System.Text.Json
@attribute [StreamRendering]
@rendermode InteractiveAuto

@inject ITechnicalReportData _techReportDB

<div><h3>DODAVANJE IZVESTAJA TEHNICKOG PREGLEDA</h3></div>

<div class="card text-center">
    <div class="card-header">
        Podaci o vozilu
    </div>
    <div class="card-body">
        <form>
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" placeholder="Marka vozila" @bind="Marka">
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Model vozila" @bind="Model">
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Godiste" @bind="Godiste">
                </div>
            </div>
        </form>
    </div>
</div>

<div style="height:10px"></div>

<div class="card text-center">
    <div class="card-header">
        Podaci o vlasniku
    </div>
    <div class="card-body">
        <form>
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" placeholder="Ime vlasnika" @bind="ImeVlasnika">
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Prezime vlasnika" @bind="PrezimeVlasnika">
                </div>
            </div>
        </form>
    </div>
</div>

<div style="height:10px"></div>

<div class="card text-center">
    <div class="card-header">
        Podaci o tehnickom pregledu
    </div>
    <div class="card-body">
        <form>
            <div class="row">
                <div class="col">
                    <select class="form-select" aria-label="Default select example" @bind="@selectedEmployeeId">
                        <option selected>Izaberite zaposlenog</option>
                        @if (EmployeesList != null && EmployeesList.Count > 0)
                        {
                            @foreach (var item in EmployeesList!)
                            {
                                <option value=@item.ZaposleniID>@item.Ime @item.Prezime</option>
                            }

                        }
                    </select>
                </div>
                <div class="col">
                    <select class="form-select" aria-label="Default select example" @bind="@selectedTechTypeId">
                        <option selected>Izaberite tip tehnickog pregleda</option>
                        @if (TechnicalInspectionTypeList != null && TechnicalInspectionTypeList.Count > 0)
                        {
                            @foreach (var item in TechnicalInspectionTypeList!)
                            {
                                <option value=@item.TipTehnickogPregledaID>@item.NazivTehnickogPregleda</option>
                            }

                        }
                    </select>
                </div>
                <div class="col">
                    <input type="date" style="width:100%; height:38px; border-radius:4px; border-color:lightgray" @bind="@SelectedDate">
                </div>
                <div class="col-2">
                      <label class="form-check-label" for="flexSwitchCheckDefault" style="margin-top:5px">Neispravan:</label>
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" style="margin-left:5px; margin-top:10px" @bind="IspravanNeispravan">
                </div>
            </div>
        </form>
    </div>
</div>

@if (IspravanNeispravan)
{
    <div style="height:10px"></div>

    <div class="card text-center">
        <div class="card-header">
            Neispravne stavke
        </div>
        <div class="card-body">
            <form>
                @foreach (var item in DefectiveItemsList)
                {
                    <div class="row mb-3">
                        <div class="col">
                            <input type="text" class="form-control" placeholder="Naziv neispravne stavke" @bind="item.NazivNeispravnogDela">
                        </div>
                        <div class="col">
                            <input type="text" class="form-control" placeholder="Opis neispravnosti" @bind="item.OpisNeispravnosti">
                        </div>
                        <div class="col-1">
                            <button type="button" class="btn btn-danger" @onclick="() => RemoveRow(item)">x</button>
                        </div>
                    </div>
                }
                <div class="text-center mt-3">
                    <button type="button" class="btn btn-outline-secondary" @onclick="AddRow">Dodaj stavku</button>
                </div>
            </form>
        </div>
    </div>
}

<div style="height:10px"></div>

<button type="button" class="btn btn-secondary" @onclick="ZapisiMethod" style="margin-right: 10px">Zapisi</button>
<button type="button" class="btn btn-secondary" @onclick="OcistiPolja">Odustani</button>

@if (SuccessDialogShow)
{
    <SuccessModal OnClose="@OnCloseSuccesModal"></SuccessModal>
}
@if (ErrorDialogShow)
{
    <DeleteModalVehicleDialog OnClose="@OnCloseErrorModal"></DeleteModalVehicleDialog>
}
@if (ValidateDialogShow)
{
    <ValidateModal OnClose="@OnCloseValidateModal"></ValidateModal>
}

@code {
    private string? selectedEmployeeId;
    private string? selectedTechTypeId;
    private string? Marka { get; set; }
    private string? Model { get; set; }
    private string? Godiste { get; set; }
    private string? ImeVlasnika { get; set; }
    private string? PrezimeVlasnika { get; set; }
    private DateTime SelectedDate { get; set; } = DateTime.Now.Date;
    public bool IspravanNeispravan { get; set; } = false;

    public bool SuccessDialogShow { get; set; } = false;
    public bool ErrorDialogShow { get; set; } = false;
    public bool ValidateDialogShow { get; set; } = false;

    public JsonElement JsonObject { get; set; }

    public List<DefectiveItems> DefectiveItemsList { get; set; } = new List<DefectiveItems>();
    public List<EmployeeModel>? EmployeesList;
    public List<TechnicalInspectionTypeModel>? TechnicalInspectionTypeList;

    protected override async Task OnInitializedAsync()
    {
        EmployeesList = await _techReportDB.GetAllEmployees();
        TechnicalInspectionTypeList = await _techReportDB.GetAllTechnicalTypes();
    }

    private void AddRow()
    {
        DefectiveItemsList.Add(new DefectiveItems());
    }

    private void RemoveRow(DefectiveItems item)
    {
        DefectiveItemsList.Remove(item);
    }

    private void ZapisiMethod()
    {
        var valid = Validation(
            Marka, 
            Model, 
            Godiste, 
            ImeVlasnika, 
            PrezimeVlasnika, 
            selectedEmployeeId, 
            selectedTechTypeId, 
            DefectiveItemsList);

        if (!valid)
        {
            ValidateDialogShow = true;
            return;
        }

        string defectiveItemsJson = JsonSerializer.Serialize(DefectiveItemsList);

        JsonObject = new JsonElement();
        JsonObject = JsonDocument.Parse($@"{{
            ""MarkaJson"": ""{Marka}"",
            ""ModelJson"": ""{Model}"",
            ""GodisteJson"": ""{Godiste}"",
            ""ImeVlasnikaJson"": ""{ImeVlasnika}"",
            ""PrezimeVlasnikaJson"": ""{PrezimeVlasnika}"",
            ""EmployeeId"": ""{selectedEmployeeId}"",
            ""TehnicalTypeID"": ""{selectedTechTypeId}"",
            ""DateOfTechReport"": ""{SelectedDate}"",
            ""IsPass"": ""{!IspravanNeispravan}"",
            ""DefectiveItemsJson"": {defectiveItemsJson}
        }}").RootElement;

        var result = _techReportDB.AddNewTechReportTransaction(JsonObject, DefectiveItemsList);

        CheckResult(result);
        OcistiPolja();
    }

    private void OcistiPolja()
    {
        Marka = string.Empty;
        Model = string.Empty;
        Godiste = string.Empty;
        ImeVlasnika = string.Empty;
        PrezimeVlasnika = string.Empty;
        selectedEmployeeId = "Izaberite zaposlenog";
        selectedTechTypeId = "Izaberite tip tehnickog pregleda";
        SelectedDate = DateTime.Now.Date;
        IspravanNeispravan = false;
        DefectiveItemsList.Clear();
    }

    private bool Validation(
        string marka, 
        string model, 
        string godiste, 
        string ime, 
        string prezime, 
        string employeeID, 
        string techTypeId, 
        List<DefectiveItems> defectiveItemList)
    {
        if (IspravanNeispravan)
        {
            if (string.IsNullOrEmpty(marka) || string.IsNullOrEmpty(model) || string.IsNullOrEmpty(godiste) || string.IsNullOrEmpty(ime) || string.IsNullOrEmpty(prezime) || defectiveItemList.Any(item => string.IsNullOrEmpty(item.NazivNeispravnogDela) || string.IsNullOrEmpty(item.OpisNeispravnosti)))
            {
                return false;
            }
            else if (!int.TryParse(godiste, out _) || !int.TryParse(employeeID, out _) || !int.TryParse(techTypeId, out _))
            {
                return false;
            }
            return true;
        }
        else
        {
            if (string.IsNullOrEmpty(marka) || string.IsNullOrEmpty(model) || string.IsNullOrEmpty(godiste) || string.IsNullOrEmpty(ime) || string.IsNullOrEmpty(prezime))
            {
                return false;
            }
            else if (!int.TryParse(godiste, out _) || !int.TryParse(employeeID, out _) || !int.TryParse(techTypeId, out _))
            {
                return false;
            }
            return true;
        }
    }

    private void CheckResult(bool parameter)
    {
        if (parameter)
            SuccessDialogShow = true;
        else
            ErrorDialogShow = true;
    }

    private void OnCloseSuccesModal(bool parameter)
    {
        SuccessDialogShow = parameter;
        StateHasChanged();
    }

    private void OnCloseErrorModal(bool parameter)
    {
        ErrorDialogShow = parameter;
        StateHasChanged();
    }

    private void OnCloseValidateModal(bool parameter)
    {
        ValidateDialogShow = parameter;
        StateHasChanged();
    }
}
